# GENERATED BY DEEPSEEK

"""
Convert Gregorian date to Jalali (Shamsi) date
Based on the official Solar Hijri algorithm
"""
function saferm_time()
    try
        rm("time.JSON")
    catch e
        @warn "Failed to delete $path: $e"
    end
end

saferm_time()

function gregorian_to_jalali(y::Int, m::Int, d::Int)
    # Validate input
    if y < 0 || m < 1 || m > 12 || d < 1 || d > 31
        error("Invalid Gregorian date")
    end

    # Conversion algorithm constants
    gy = y - 1600
    gm = m - 1
    gd = d - 1

    # Conversion calculations
    g_day_no = 365*gy + div(gy+3, 4) - div(gy+99, 100) + div(gy+399, 400)
    for i in 1:gm
        g_day_no += gregorian_month_days(i)
    end
    
    if gm > 1 && ((gy%4 == 0 && gy%100 != 0) || (gy%400 == 0))
        g_day_no += 1  # Leap day
    end
    
    g_day_no += gd

    # Find Jalali year
    j_day_no = g_day_no - 79
    j_np = div(j_day_no, 12053)
    j_day_no %= 12053
    jy = 979 + 33*j_np + 4*div(j_day_no, 1461)
    j_day_no %= 1461

    if j_day_no >= 366
        jy += div(j_day_no-1, 365)
        j_day_no = (j_day_no-1) % 365
    end

    # Find Jalali month and day
    jm, jd = 0, 0
    for i in 1:11
        if j_day_no >= jalali_month_days(i, jy)
            jm += 1
            j_day_no -= jalali_month_days(i, jy)
        else
            break
        end
    end
    jm += 1
    jd = j_day_no + 1

    return (jy, jm, jd)
end

# Helper functions
function gregorian_month_days(m::Int)
    [0, 31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31][m+1]
end

function jalali_month_days(m::Int, y::Int)
    days = [31, 31, 31, 31, 31, 31, 30, 30, 30, 30, 30, 29]
    if m == 12 && is_jalali_leap(y)
        days[12] = 30
    end
    days[m]
end

function is_jalali_leap(y::Int)
    (y - 979) % 33 ∈ [1, 5, 9, 13, 17, 22, 26, 30]
end

"""
Convert Jalali date to string with Persian month names
"""
function jalali_date_string(y::Int, m::Int, d::Int)
    month_names = [
        "فروردین", "اردیبهشت", "خرداد", "تیر",
        "مرداد", "شهریور", "مهر", "آبان",
        "آذر", "دی", "بهمن", "اسفند"
    ]
    "$d $(month_names[m]) $y"
end

# Example usage
greg_date = (2025, 4, 30)  # Example Gregorian date
jalali_date = gregorian_to_jalali(greg_date...)
formatted_date = jalali_date_string(jalali_date...)


println("Gregorian: $(greg_date[3])-$(greg_date[2])-$(greg_date[1])")
println("Jalali:    $(jalali_date[3])-$(jalali_date[2])-$(jalali_date[1])")
println("Formatted: $formatted_date")

using Dates

current_date = today()
greg_date = (year(current_date), month(current_date), day(current_date))
jalali_date = gregorian_to_jalali(greg_date...)

formatted_date

t = Time(now())
t_formatted = Dates.format(t, "HH:MM")
println(t_formatted)

jy = jalali_date[1]
jm = jalali_date[2]
jd = jalali_date[3]

function timeJSON()
    file = open("time.json", "w")
    write(file, "{\n")
    write(file, "\t\"time\": \"$t_formatted\",\n")
    write(file, "\t\"year\": \"$jy\",\n")
    write(file, "\t\"month\": \"$jm\",\n")
    write(file, "\t\"day\": \"$jd\"\n")
    write(file, "}")
    close(file)
end

timeJSON()
